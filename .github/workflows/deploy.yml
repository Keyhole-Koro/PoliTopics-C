name: Terraform Apply

on:
  push:
    branches: ["stage"]

jobs:
  tf-apply:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      # llm config
      TF_VAR_GEMINI_MODEL_NAME: ${{ secrets.GEMINI_MODEL_NAME }}
      TF_VAR_gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
      TF_VAR_GROQ_MODEL_NAME: ${{ secrets.GROQ_MODEL_NAME }}
      TF_VAR_groq_api_key: ${{ secrets.GROQ_API_KEY }}
      TF_VAR_char_threshold: ${{ secrets.CHAR_THRESHOLD }}

      # this Lambda config
      TF_VAR_run_api_key: ${{ secrets.RUN_API_KEY }}

      # Region
      TF_VAR_region: ap-northeast-3

      # APIGW IDs from GitHub Secrets
      APIGW_API_ID:   ${{ secrets.APIGW_API_ID }}
      APIGW_ROUTE_ID: ${{ secrets.APIGW_ROUTE_ID }}

    steps:
      # ---- Build Lambda package ----
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install & Build
        run: |
          npm ci
          npm run build
          mkdir -p build
          ( cd dist && zip -r ../build/lambda.zip . )
          ls -l build/

      # ---- Setup Terraform ----
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6   # >=1.5 is fine; pinned for reproducibility

      # ---- Configure AWS via OIDC (no static keys needed) ----
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-3

      # ---- Terraform Init ----
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -input=false

      # ---- Export TF vars (zip path) ----
      - name: Export TF vars
        working-directory: ./terraform
        run: echo "TF_VAR_lambda_zip_path=${GITHUB_WORKSPACE}/build/lambda.zip" >> "$GITHUB_ENV"

      # ---- Preflight: adopt existing APIGW route via Secrets ----
      - name: Adopt existing APIGW route (import via secrets)
        working-directory: ./terraform
        shell: bash
        env:
          FUNCTION_NAME: politopics-c   # your Lambda name (fixed in tf)
        run: |
          set -euo pipefail

          # Import the APIGW route if not yet in state (uses secrets)
          if [ -n "${APIGW_API_ID:-}" ] && [ -n "${APIGW_ROUTE_ID:-}" ]; then
            if ! terraform state show -no-color aws_apigatewayv2_route.post_run >/dev/null 2>&1; then
              echo "Importing route ${APIGW_API_ID}/${APIGW_ROUTE_ID} ..."
              terraform import aws_apigatewayv2_route.post_run "${APIGW_API_ID}/${APIGW_ROUTE_ID}" || true
            else
              echo "Route already managed in state. Skipping import."
            fi
          else
            echo "Secrets APIGW_API_ID / APIGW_ROUTE_ID not set. Skipping route import."
          fi

          # (Optional) adopt existing Lambda permission by stable SID to avoid 409
          SID="AllowExecutionFromAPIGatewayV2"
          if ! terraform state show -no-color aws_lambda_permission.allow_apigw >/dev/null 2>&1; then
            echo "Attempting to import Lambda permission ${FUNCTION_NAME}/${SID} (if exists)..."
            terraform import aws_lambda_permission.allow_apigw "${FUNCTION_NAME}/${SID}" || true
          fi

      # ---- Preflight: adopt existing DynamoDB table ----
      - name: Adopt existing DynamoDB table (import if exists)
        working-directory: ./terraform
        shell: bash
        env:
          DDB_TABLE_NAME: politopics
        run: |
          set -euo pipefail

          echo "Checking region: ${TF_VAR_region:-not-set}"
          if aws dynamodb describe-table --table-name "${DDB_TABLE_NAME}" --region "${TF_VAR_region}" >/dev/null 2>&1; then
            echo "Found existing DynamoDB table '${DDB_TABLE_NAME}' in ${TF_VAR_region}."
            if ! terraform state show -no-color aws_dynamodb_table.politopics >/dev/null 2>&1; then
              echo "Importing DynamoDB table '${DDB_TABLE_NAME}' into state..."
              terraform import aws_dynamodb_table.politopics "${DDB_TABLE_NAME}"
            else
              echo "DynamoDB table already managed in state. Skipping import."
            fi
          else
            echo "No existing table '${DDB_TABLE_NAME}' found in ${TF_VAR_region}. Skipping import."
          fi

      # ---- Terraform Format & Validate ----
      - name: Terraform FMT & Validate
        working-directory: ./terraform
        run: |
          terraform fmt -recursive
          terraform validate

      # ---- Plan / Apply ----
      - name: Terraform Plan
        working-directory: ./terraform
        env:
          TF_VAR_lambda_zip_path: ${{ env.TF_VAR_lambda_zip_path }}
        run: terraform plan -input=false -lock-timeout=5m -parallelism=1 -var="region=ap-northeast-3"

      - name: Terraform Apply
        working-directory: ./terraform
        env:
          TF_VAR_lambda_zip_path: ${{ env.TF_VAR_lambda_zip_path }}
        run: terraform apply -auto-approve -input=false -lock-timeout=5m -parallelism=1 -var="region=ap-northeast-3"
